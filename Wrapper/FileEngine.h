#pragma once

#include "mip\file\file_engine.h"

#include "FileHandler.h"
#include "Identity.h"
#include "Label.h"
#include "ManagedObject.h"
#include "Pair.h"

using namespace System;
using namespace System::Collections::Generic;
using namespace System::IO;

namespace NetMip
{
	/// <summary>
	/// Interface for all engine functions
	/// </summary>
	public ref class FileEngine : public ManagedObject<std::shared_ptr<mip::FileEngine>>
	{
	public:
		ref class Settings : public ManagedObject<mip::FileEngine::Settings>
		{
		public:

			/// <summary>
			/// Creates a new instance of the <see cref="Settings"/> class.
			/// </summary>
			/// <param name="id">Set it to the unique engine id generated by <see cref="AddEngineAsync"/>.</param>
			/// <param name="clientData">The client data.</param>
			/// <remarks>
			/// The locale will default to "en-US".
			/// Use this to create Settings to call <see cref="LoadEngineAsync"/> to load an existing engine (previously added via <see cref="AddEngineAsync"/>).
			/// </remarks>
			Settings(String^ id, String^ clientData)
				: Settings(id, clientData, "en-US") {}

			/// <summary>
			/// Creates a new instance of the <see cref="Settings"/> class.
			/// </summary>
			/// <param name="id">Set it to the unique engine id generated by <see cref="AddEngineAsync"/>.</param>
			/// <param name="clientData">The client data.</param>
			/// <param name="locale">The locale.</param>
			/// <remarks>
			/// Use this to create Settings to call <see cref="LoadEngineAsync"/> to load an existing engine (previously added via <see cref="AddEngineAsync"/>).
			/// </remarks>
			Settings(String^ id, String^ clientData, String^ locale);

			/// <summary>
			/// Creates a new instance of the <see cref="Settings"/> class.
			/// </summary>
			/// <param name="identity">Identity info of the user for whom the engine needs to be added.</param>
			/// <param name="clientData">The client data.</param>
			/// <remarks>
			/// The locale will default to "en-US".
			/// Use this to create Settings to call <see cref="AddEngineAsync"/> to add a new engine.
			/// </remarks>
			Settings(Identity^ identity, String^ clientData)
				: Settings(identity, clientData, "en-US") {}

			/// <summary>
			/// Creates a new instance of the <see cref="Settings"/> class.
			/// </summary>
			/// <param name="identity">Identity info of the user for whom the engine needs to be added.</param>
			/// <param name="clientData">The client data.</param>
			/// <param name="locale">The locale.</param>
			/// <remarks>
			/// Use this to create Settings to call <see cref="AddEngineAsync"/> to add a new engine.
			/// </remarks>
			Settings(Identity^ identity, String^ clientData, String^ locale);

		internal:
			Settings(mip::FileEngine::Settings* settings);

		public:

			/// <summary>
			/// Gets the engine's ID.
			/// </summary>
			property String^ Id
			{
				String^ get();
			}

			/// <summary>
			/// Gets and sets the engine's Identity.
			/// </summary>
			property Identity^ Identity
			{
				NetMip::Identity^ get();
				void set(NetMip::Identity^ value);
			}

			/// <summary>
			/// Gets the engine's client data.
			/// </summary>
			property String^ ClientData
			{
				String^ get();
			}

			/// <summary>
			/// Gets the engine's locale.
			/// </summary>
			property String^ Locale
			{
				String^ get();
			}

			/// <summary>
			/// Gets and sets a list of name/value pairs used for testing and experimentation.
			/// </summary>
			property array<Pair<String^, String^>^>^ CustomSettings
			{
				array<Pair<String^, String^>^>^ get();
				void set(array<Pair<String^, String^>^>^ value);
			}

			/// <summary>
			/// Gets the engine's session ID.
			/// </summary>
			property String^ SessionId
			{
				String^ get();
				void set(String^ value);
			}
		};


	internal:
		FileEngine(std::shared_ptr<mip::FileEngine>* ptr)
			: ManagedObject(true, ptr) {}

	public:
		/// <summary>
		/// Gets the engine settings.
		/// </summary>
		FileEngine::Settings^ GetSettings();

		/// <summary>
		/// Gets the list of sensitivity labels.
		/// </summary>
		array<NetMip::Label^>^ ListSensitivityLabels();

		/// <summary>
		/// Creates the file handler for given file path.
		/// </summary>
		/// <param name="inputFilePath">The file to open. The path must include the file name and, if one exists, the file name extension.</param>
		FileHandler^ CreateFileHandler(
			String^ inputFilePath);

		/// <summary>
		/// Creates the file handler for given file stream.
		/// </summary>
		/// <param name="inputStream">A stream that represents the file.</param>
		/// <param name="inputFileName">The path to the file. The path must include the file name and, if one exists, the file name extension.</param>
		FileHandler^ CreateFileHandler(
			System::IO::Stream^ inputStream,
			String^ inputFileName);

	};
}