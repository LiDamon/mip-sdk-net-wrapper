/**
 *
 * Copyright (c) Microsoft Corporation.
 * All rights reserved.
 *
 * This code is licensed under the MIT License.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files(the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions :
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

#ifndef API_MIP_FILE_FILE_ENGINE_H_
#define API_MIP_FILE_FILE_ENGINE_H_

#include <memory>
#include <string>
#include <vector>

#include "mip/file/file_handler.h"
#include "mip/upe/execution_state.h"
#include "mip/upe/label.h"

namespace mip {

/**
 * @brief Interface for all engine functions.
 */
class FileEngine {
public:

  class Settings {
  public:
    /**
     * @brief Creates an instance with the given parameters.
     * 
     * Use this to create Settings to call LoadEngineAsync to load an existing engine (previously
     * added via AddEngineAsync).
     * 
     * @param id Set it to the unique engine id generated by AddEngineAsync.
     */
    Settings(
        const std::string& id,
        const std::string& clientData,
        const std::string& locale = "en-US")
      : mId(id),
        mClientData(clientData),
        mLocale(locale) {
    }

    /**
     * @brief Creates an instance with the given parameters.
     * 
     * Use this to create Settings to call AddEngineAsync to add a new engine. 
     * 
     * @param identity Identity info of the user for whom the engine needs to be added.
     */
    Settings(
        const Identity& identity,
        const std::string& clientData,
        const std::string& locale = "en-US")
      : mIdentity(identity),
        mClientData(clientData),
        mLocale(locale) {
    }

    /**
     * @brief Returns the engine Id.
     */
    const std::string& GetId() const { return mId; }

    /**
     * @brief Returns the engine Identity.
     */
    const Identity& GetIdentity() const { return mIdentity; }

    /**
     * @brief Sets the engine identity.
     */
    void SetIdentity(const Identity& identity) { mIdentity = identity; }

    /**
     * @brief Returns the engine client data.
     */
    const std::string& GetClientData() const { return mClientData; }

    /**
     * @brief Return the engine locale.
     */
    const std::string& GetLocale() const { return mLocale; }

    /**
     * @brief Sets a list of name/value pairs used for testing and experimentation.
     */
    void SetCustomSettings(const std::vector<std::pair<std::string, std::string>>& value) { mCustomSettings = value; }

    /**
     * @brief Gets a list of name/value pairs used for testing and experimentation.
     */
    const std::vector<std::pair<std::string, std::string>>& GetCustomSettings() const { return mCustomSettings; }

    /**
    * @brief Sets the engine session id.
    */
    void SetSessionId(const std::string& sessionId) {
      mSessionId = sessionId;
    }

    /**
    * @brief Return the engine session id.
    */
    const std::string& GetSessionId() const {
      return mSessionId;
    }

  private:
    std::string mId;
    Identity mIdentity;
    std::string mClientData;
    std::vector<std::pair<std::string, std::string>> mCustomSettings;
    std::string mLocale;
    std::string mSessionId;
  };

  virtual ~FileEngine() {}

  /**
   * @brief Returns the engine settings.
   */
  virtual const Settings& GetSettings() const = 0;

  /**
   * @brief Returns a list of sensitivity labels.
   */
  virtual const std::vector<std::shared_ptr<Label>>& ListSensitivityLabels() = 0;

  /**
   * @brief Returns the file handler for given file path.
   * 
   * @param The file to open. The path must include the file name and, if one exists, the file name extension. 
   * @param A class implementing the FileHandler::Observer interface.
   */
  virtual std::shared_ptr<FileHandler> CreateFileHandler(
      const std::string& inputFilePath, 
      const std::shared_ptr<FileHandler::Observer>& fileHandlerObserver) = 0;

  /**
   * @brief Returns the file handler for given file stream.
   * 
   * @param A stream that represents the file.
   * @param The path to the file. The path must include the file name and, if one exists, the file name extension. 
   * @param A class implementing the FileHandler::Observer interface. 
   */
  virtual std::shared_ptr<FileHandler> CreateFileHandler(
      const std::shared_ptr<Stream>& inputStream,
      const std::string& inputFileName, 
      const std::shared_ptr<FileHandler::Observer>& fileHandlerObserver) = 0;

protected:
  FileEngine() {}
};

} // namespace mip

#endif  // API_MIP_FILE_FILE_ENGINE_H_
