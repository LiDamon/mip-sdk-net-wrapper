/**
 *
 * Copyright (c) Microsoft Corporation.
 * All rights reserved.
 *
 * This code is licensed under the MIT License.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files(the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions :
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */
/**
 * @brief This file contains the PolicyEngine class which includes the PolicyEngine::Settings class.
 * 
 * @file policy_engine.h
 */

#ifndef API_MIP_UPE_POLICY_ENGINE_H_
#define API_MIP_UPE_POLICY_ENGINE_H_

#include <memory>
#include <string>
#include <vector>

#include "mip/common_types.h"
#include "mip/upe/action.h"
#include "mip/upe/content_label.h"
#include "mip/upe/execution_state.h"
#include "mip/upe/label.h"

namespace mip {


/**
 * @brief This class provides an interface for all engine functions.
 */
class PolicyEngine {
public:
  /**
   * @brief An instance of this class with the approprieted parameters should be provide to initiate an engine. 
   */
  class Settings {
  public:
    /**
     * @brief Construct an instance with the given parameters. Use this to create Settings to call LoadEngineAsync to
     * load an existing engine.
     *
     * @param id Set it to the unique engine id generated by AddEngineAsync or one self-generated. When loading an
     * existing engine re-use the id else a new engine will be created.
     * @param clientData customizable client data that can be stored with the engine when unloaded, can be retrieve from
     * a loaded engine.
     * @param locale engine localizable output will be provided in this locale, default "en-US".
     */
    Settings(
        const std::string& id,
        const std::string& clientData,
        const std::string& locale = "en-US")
      : mId(id),
        mClientData(clientData),
        mLocale(locale) {
    }

    /**
     * @brief Use this to create Settings to call AddEngineAsync to add a new engine.
     *
     * @param identity unique identifier of the user for whom the engine needs to be added.
     * @param clientData customizable client data that can be stored with the engine when unloaded, can be retrieve from
     * a loaded engine.
     * @param locale engine localizable output will be provided in this locale, default "en-US".
     */
    Settings(
        const Identity& identity,
        const std::string& clientData,
        const std::string& locale = "en-US")
      : mIdentity(identity),
        mClientData(clientData),
        mLocale(locale) {
    }
    /**
     * @brief Get the engine id.
     * 
     * @return a unique string identifying the engine.
     */
    const std::string& GetId() const { return mId; }
    /**
     * @brief Set the engine id.
     * 
     * @param id engine id.
     */
    void SetId(const std::string& id) { mId = id; }
    /**
     * @brief Get the Identity object
     * 
     * @return a refrence to the identity in the settings object.
     * @see mip::Identity
     */
    const Identity& GetIdentity() const { return mIdentity; }
    /**
     * @brief Set the Identity object
     * 
     * @param identity the unique identity of a user.
     * @see mip::Identity
     */
    void SetIdentity(const Identity& identity) { mIdentity = identity; }
    /**
     * @brief Get the Client Data set in the settings.
     * 
     * @return a string of data specified by the client.
     */
    const std::string& GetClientData() const { return mClientData; }
    /**
     * @brief Set the Client Data string. 
     * 
     * @param clientData user specified data.
     */
    void SetClientData(const std::string& clientData) { mClientData = clientData; }
    /**
     * @brief Get the Locale set in the settings.
     * 
     * @return the locale.
     */
    const std::string& GetLocale() const { return mLocale; }
    /**
     * @brief Set the custom settings, used for feature gating and testing.
     * 
     * @param customSettings List of name/value pairs.
     */
    void SetCustomSettings(const std::vector<std::pair<std::string, std::string>>& customSettings) {
      mCustomSettings = customSettings;
    }
    /**
     * @brief Set the custom settings, used for feature gating and testing.
     * 
     * @param List of name/value pairs.
     */
    const std::vector<std::pair<std::string, std::string>>& GetCustomSettings() const {
      return mCustomSettings;
    }
    /**
     * @brief Set the session id, used for client defined telementry. 
     * 
     * @param sessionId a unique string that connects telemetry events.
     */
    void SetSessionId(const std::string& sessionId) {
      mSessionId = sessionId;
    }
    /**
     * @brief Get the session id, a unique identifier.
     * 
     * @return the session id.
     */
    const std::string& GetSessionId() const {
      return mSessionId;
    }

  private:
    std::string mId;
    Identity mIdentity;
    std::string mClientData;
    std::vector<std::pair<std::string, std::string>> mCustomSettings;
    std::string mLocale;
    std::string mSessionId;
  };

  /**
   * @brief Get the policy engine Settings. 
   * 
   * @return policy engine settings.
   * @see mip::PolicyEngine::Settings
   */
  virtual const Settings& GetSettings() const = 0;

  // 
  /**
   * @brief list the sensitivity labels associated with the policy engine.
   * 
   * @return a list of sensitivity labels.
   */
  virtual const std::vector<std::shared_ptr<Label>>& ListSensitivityLabels() = 0;

  /**
   * @brief Get the sensitivity label from existing content.
   * 
   * @note Required information to retrieve the label will be obtained by using the provided execution state.
   * @param state 
   * @return a content label object that contains the sensitivity label as well as additional information. 
   * returns empty if non exists.
   * @see mip::ContentLabel.
   */
  virtual std::shared_ptr<ContentLabel> GetSensitivityLabel(const ExecutionState& state) = 0;

  /**
   * @brief Get the default sensitivity label. 
   * 
   * @return default sensitivy label if exists, nullptr if there is no default label set.
   */
  virtual std::shared_ptr<Label> GetDefaultSensitivityLabel() = 0;

  // 
  /**
   * @brief Executes the rules in the engine based on the provided state and returns the list of actions 
   * to be executed.
   * 
   * @param state the current execution state of the content the rules are running on. 
   * @return list of actions that should be applied on the content.
   */
  virtual std::vector<std::shared_ptr<Action>> ComputeActions(const ExecutionState& state) = 0;
  
  /** @cond DOXYGEN_HIDE */
  virtual ~PolicyEngine() { }

protected:
  PolicyEngine() { }
  /** @endcond */
};

}  // namespace mip

#endif  // API_MIP_UPE_POLICY_ENGINE_H_
